/**
 * clicksend
 *
 * This file was automatically generated for ClickSend by APIMATIC v2.0 ( https://apimatic.io ) on 12/20/2016
 */

var _request = require('../Http/Client/RequestClient'),
    _configuration = require('../configuration'),
    _APIHelper = require('../APIHelper');

var PostLetterController = {

    /**
     * Send post letter
     * @param {array} attributes    Required parameter: Example: 
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {string}
     */
    sendPostLetter: function (attributes, callback) {

        //validating required parameters
        if (attributes == null || attributes == undefined){
            return callback({errorMessage: "The parameter 'attributes' is a required parameter and cannot be null.", errorCode: -1}, null, null);
        }

        //prepare query string for API call;
        var _baseUri = _configuration.BASEURI;
        
        var _queryBuilder = _baseUri + "/post/letters/send";
        
        //validate and preprocess url
        var _queryUrl = _APIHelper.cleanUrl(_queryBuilder);
        
        //prepare headers
        var _headers = {
            "content-type": "application/json; charset=utf-8",
            "user-agent": "ClickSendSDK"
        };

        //Remove null values
        _APIHelper.cleanObject(attributes);

        //Construct the request
        var _options = {
            queryUrl: _queryUrl,
            method: "POST",
            headers: _headers,
            body : _APIHelper.jsonSerialize(attributes),
            username: _configuration.username,
            password: _configuration.key
        };
        
        //Build the response processing. 
        function cb (_error, _response, _context) {
            if(_error) {
                callback({errorMessage: _error.message, errorCode: _error.code},null,_context);
            } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                callback(null, _response.body,_context);
            } else if (_response.statusCode == 404) {
                callback(null,null,_context);
                return;
            } else if (_response.statusCode == 400) {
                callback({errorMessage: "BAD_REQUEST", errorCode: 400, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 401) {
                callback({errorMessage: "UNAUTHORIZED", errorCode: 401, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 403) {
                callback({errorMessage: "FORBIDDEN", errorCode: 403, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 405) {
                callback({errorMessage: "METHOD_NOT_FOUND", errorCode: 405, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 429) {
                callback({errorMessage: "TOO_MANY_REQUESTS", errorCode: 429, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 500) {
                callback({errorMessage: "INTERNAL_SERVER_ERROR", errorCode: 500, errorResponse:_response.body}, null, _context);
            } else {
                callback({errorMessage: "HTTP Response Not OK", errorCode: _response.statusCode, errorResponse: _response.body}, null, _context);
            }
        }
        _request(_options, cb);
    },


    /**
     * Calculate post letter price
     * @param {array} attributes    Required parameter: Example: 
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {string}
     */
    calculatePrice: function (attributes, callback) {

        //validating required parameters
        if (attributes == null || attributes == undefined){
            return callback({errorMessage: "The parameter 'attributes' is a required parameter and cannot be null.", errorCode: -1}, null, null);
        }

        //prepare query string for API call;
        var _baseUri = _configuration.BASEURI;
        
        var _queryBuilder = _baseUri + "/post/letters/price";
        
        //validate and preprocess url
        var _queryUrl = _APIHelper.cleanUrl(_queryBuilder);
        
        //prepare headers
        var _headers = {
            "content-type": "application/json; charset=utf-8",
            "user-agent": "ClickSendSDK"
        };

        //Remove null values
        _APIHelper.cleanObject(attributes);

        //Construct the request
        var _options = {
            queryUrl: _queryUrl,
            method: "POST",
            headers: _headers,
            body : _APIHelper.jsonSerialize(attributes),
            username: _configuration.username,
            password: _configuration.key
        };
        
        //Build the response processing. 
        function cb (_error, _response, _context) {
            if(_error) {
                callback({errorMessage: _error.message, errorCode: _error.code},null,_context);
            } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                callback(null, _response.body,_context);
            } else if (_response.statusCode == 404) {
                callback(null,null,_context);
                return;
            } else if (_response.statusCode == 400) {
                callback({errorMessage: "BAD_REQUEST", errorCode: 400, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 401) {
                callback({errorMessage: "UNAUTHORIZED", errorCode: 401, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 403) {
                callback({errorMessage: "FORBIDDEN", errorCode: 403, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 405) {
                callback({errorMessage: "METHOD_NOT_FOUND", errorCode: 405, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 429) {
                callback({errorMessage: "TOO_MANY_REQUESTS", errorCode: 429, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 500) {
                callback({errorMessage: "INTERNAL_SERVER_ERROR", errorCode: 500, errorResponse:_response.body}, null, _context);
            } else {
                callback({errorMessage: "HTTP Response Not OK", errorCode: _response.statusCode, errorResponse: _response.body}, null, _context);
            }
        }
        _request(_options, cb);
    },


    /**
     * Get all post letter history
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {string}
     */
    getPostLetterHistory: function (callback) {


        //prepare query string for API call;
        var _baseUri = _configuration.BASEURI;
        
        var _queryBuilder = _baseUri + "/post/letters/history";
        
        //validate and preprocess url
        var _queryUrl = _APIHelper.cleanUrl(_queryBuilder);
        
        //prepare headers
        var _headers = {
            "user-agent": "ClickSendSDK"
        };

        //Construct the request
        var _options = {
            queryUrl: _queryUrl,
            method: "GET",
            headers: _headers,
            username: _configuration.username,
            password: _configuration.key
        };
        
        //Build the response processing. 
        function cb (_error, _response, _context) {
            if(_error) {
                callback({errorMessage: _error.message, errorCode: _error.code},null,_context);
            } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                callback(null, _response.body,_context);
            } else if (_response.statusCode == 404) {
                callback(null,null,_context);
                return;
            } else if (_response.statusCode == 400) {
                callback({errorMessage: "BAD_REQUEST", errorCode: 400, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 401) {
                callback({errorMessage: "UNAUTHORIZED", errorCode: 401, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 403) {
                callback({errorMessage: "FORBIDDEN", errorCode: 403, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 405) {
                callback({errorMessage: "METHOD_NOT_FOUND", errorCode: 405, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 429) {
                callback({errorMessage: "TOO_MANY_REQUESTS", errorCode: 429, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 500) {
                callback({errorMessage: "INTERNAL_SERVER_ERROR", errorCode: 500, errorResponse:_response.body}, null, _context);
            } else {
                callback({errorMessage: "HTTP Response Not OK", errorCode: _response.statusCode, errorResponse: _response.body}, null, _context);
            }
        }
        _request(_options, cb);
    },


    /**
     * export post letter history
     * @param {string} filename    Required parameter: Example: 
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {string}
     */
    exportPostLetterHistory: function (filename, callback) {

        //validating required parameters
        if (filename == null || filename == undefined){
            return callback({errorMessage: "The parameter 'filename' is a required parameter and cannot be null.", errorCode: -1}, null, null);
        }

        //prepare query string for API call;
        var _baseUri = _configuration.BASEURI;
        
        var _queryBuilder = _baseUri + "/post/letters/export";
        
        //Process query parameters
        _queryBuilder = _APIHelper.appendUrlWithQueryParameters(_queryBuilder, {
            "filename": filename
        });

        //validate and preprocess url
        var _queryUrl = _APIHelper.cleanUrl(_queryBuilder);
        
        //prepare headers
        var _headers = {
            "user-agent": "ClickSendSDK"
        };

        //Construct the request
        var _options = {
            queryUrl: _queryUrl,
            method: "GET",
            headers: _headers,
            username: _configuration.username,
            password: _configuration.key
        };
        
        //Build the response processing. 
        function cb (_error, _response, _context) {
            if(_error) {
                callback({errorMessage: _error.message, errorCode: _error.code},null,_context);
            } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                callback(null, _response.body,_context);
            } else if (_response.statusCode == 404) {
                callback(null,null,_context);
                return;
            } else if (_response.statusCode == 400) {
                callback({errorMessage: "BAD_REQUEST", errorCode: 400, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 401) {
                callback({errorMessage: "UNAUTHORIZED", errorCode: 401, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 403) {
                callback({errorMessage: "FORBIDDEN", errorCode: 403, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 405) {
                callback({errorMessage: "METHOD_NOT_FOUND", errorCode: 405, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 429) {
                callback({errorMessage: "TOO_MANY_REQUESTS", errorCode: 429, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 500) {
                callback({errorMessage: "INTERNAL_SERVER_ERROR", errorCode: 500, errorResponse:_response.body}, null, _context);
            } else {
                callback({errorMessage: "HTTP Response Not OK", errorCode: _response.statusCode, errorResponse: _response.body}, null, _context);
            }
        }
        _request(_options, cb);
    }

};

module.exports = PostLetterController;