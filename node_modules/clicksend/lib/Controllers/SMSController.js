/**
 * clicksend
 *
 * This file was automatically generated for ClickSend by APIMATIC v2.0 ( https://apimatic.io ) on 12/20/2016
 */

var _request = require('../Http/Client/RequestClient'),
    _configuration = require('../configuration'),
    _APIHelper = require('../APIHelper');

var SMSController = {

    /**
     * TODO: type endpoint description here
     * @param {SmsMessageCollection} messages    Required parameter: Example: 
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {string}
     */
    sendSms: function (messages, callback) {

        //validating required parameters
        if (messages == null || messages == undefined){
            return callback({errorMessage: "The parameter 'messages' is a required parameter and cannot be null.", errorCode: -1}, null, null);
        }

        //prepare query string for API call;
        var _baseUri = _configuration.BASEURI;
        
        var _queryBuilder = _baseUri + "/sms/send";
        
        //validate and preprocess url
        var _queryUrl = _APIHelper.cleanUrl(_queryBuilder);
        
        //prepare headers
        var _headers = {
            "content-type": "application/json; charset=utf-8",
            "user-agent": "ClickSendSDK"
        };

        //Remove null values
        _APIHelper.cleanObject(messages);

        //Construct the request
        var _options = {
            queryUrl: _queryUrl,
            method: "POST",
            headers: _headers,
            body : _APIHelper.jsonSerialize(messages),
            username: _configuration.username,
            password: _configuration.key
        };
        
        //Build the response processing. 
        function cb (_error, _response, _context) {
            if(_error) {
                callback({errorMessage: _error.message, errorCode: _error.code},null,_context);
            } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                callback(null, _response.body,_context);
            } else if (_response.statusCode == 404) {
                callback(null,null,_context);
                return;
            } else if (_response.statusCode == 400) {
                callback({errorMessage: "BAD_REQUEST", errorCode: 400, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 401) {
                callback({errorMessage: "UNAUTHORIZED", errorCode: 401, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 403) {
                callback({errorMessage: "FORBIDDEN", errorCode: 403, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 405) {
                callback({errorMessage: "METHOD_NOT_FOUND", errorCode: 405, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 429) {
                callback({errorMessage: "TOO_MANY_REQUESTS", errorCode: 429, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 500) {
                callback({errorMessage: "INTERNAL_SERVER_ERROR", errorCode: 500, errorResponse:_response.body}, null, _context);
            } else {
                callback({errorMessage: "HTTP Response Not OK", errorCode: _response.statusCode, errorResponse: _response.body}, null, _context);
            }
        }
        _request(_options, cb);
    },


    /**
     * Calculate sms price
     * @param {SmsMessageCollection} messages    Required parameter: Example: 
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {string}
     */
    calculatePrice: function (messages, callback) {

        //validating required parameters
        if (messages == null || messages == undefined){
            return callback({errorMessage: "The parameter 'messages' is a required parameter and cannot be null.", errorCode: -1}, null, null);
        }

        //prepare query string for API call;
        var _baseUri = _configuration.BASEURI;
        
        var _queryBuilder = _baseUri + "/sms/price";
        
        //validate and preprocess url
        var _queryUrl = _APIHelper.cleanUrl(_queryBuilder);
        
        //prepare headers
        var _headers = {
            "content-type": "application/json; charset=utf-8",
            "user-agent": "ClickSendSDK"
        };

        //Remove null values
        _APIHelper.cleanObject(messages);

        //Construct the request
        var _options = {
            queryUrl: _queryUrl,
            method: "POST",
            headers: _headers,
            body : _APIHelper.jsonSerialize(messages),
            username: _configuration.username,
            password: _configuration.key
        };
        
        //Build the response processing. 
        function cb (_error, _response, _context) {
            if(_error) {
                callback({errorMessage: _error.message, errorCode: _error.code},null,_context);
            } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                callback(null, _response.body,_context);
            } else if (_response.statusCode == 404) {
                callback(null,null,_context);
                return;
            } else if (_response.statusCode == 400) {
                callback({errorMessage: "BAD_REQUEST", errorCode: 400, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 401) {
                callback({errorMessage: "UNAUTHORIZED", errorCode: 401, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 403) {
                callback({errorMessage: "FORBIDDEN", errorCode: 403, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 405) {
                callback({errorMessage: "METHOD_NOT_FOUND", errorCode: 405, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 429) {
                callback({errorMessage: "TOO_MANY_REQUESTS", errorCode: 429, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 500) {
                callback({errorMessage: "INTERNAL_SERVER_ERROR", errorCode: 500, errorResponse:_response.body}, null, _context);
            } else {
                callback({errorMessage: "HTTP Response Not OK", errorCode: _response.statusCode, errorResponse: _response.body}, null, _context);
            }
        }
        _request(_options, cb);
    },


    /**
     * Get all sms history
     * @param {int|null} dateFrom    Optional parameter: Start date
     * @param {int|null} dateTo    Optional parameter: End date
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {string}
     */
    getSmsHistory: function (dateFrom, dateTo, callback) {


        //prepare query string for API call;
        var _baseUri = _configuration.BASEURI;
        
        var _queryBuilder = _baseUri + "/sms/history";
        
        //Process query parameters
        _queryBuilder = _APIHelper.appendUrlWithQueryParameters(_queryBuilder, {
            "date_from": dateFrom,
            "date_to": dateTo
        });

        //validate and preprocess url
        var _queryUrl = _APIHelper.cleanUrl(_queryBuilder);
        
        //prepare headers
        var _headers = {
            "user-agent": "ClickSendSDK"
        };

        //Construct the request
        var _options = {
            queryUrl: _queryUrl,
            method: "GET",
            headers: _headers,
            username: _configuration.username,
            password: _configuration.key
        };
        
        //Build the response processing. 
        function cb (_error, _response, _context) {
            if(_error) {
                callback({errorMessage: _error.message, errorCode: _error.code},null,_context);
            } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                callback(null, _response.body,_context);
            } else if (_response.statusCode == 404) {
                callback(null,null,_context);
                return;
            } else if (_response.statusCode == 400) {
                callback({errorMessage: "BAD_REQUEST", errorCode: 400, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 401) {
                callback({errorMessage: "UNAUTHORIZED", errorCode: 401, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 403) {
                callback({errorMessage: "FORBIDDEN", errorCode: 403, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 405) {
                callback({errorMessage: "METHOD_NOT_FOUND", errorCode: 405, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 429) {
                callback({errorMessage: "TOO_MANY_REQUESTS", errorCode: 429, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 500) {
                callback({errorMessage: "INTERNAL_SERVER_ERROR", errorCode: 500, errorResponse:_response.body}, null, _context);
            } else {
                callback({errorMessage: "HTTP Response Not OK", errorCode: _response.statusCode, errorResponse: _response.body}, null, _context);
            }
        }
        _request(_options, cb);
    },


    /**
     * Export all sms history
     * @param {string} filename    Required parameter: Example: 
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {string}
     */
    exportHistory: function (filename, callback) {

        //validating required parameters
        if (filename == null || filename == undefined){
            return callback({errorMessage: "The parameter 'filename' is a required parameter and cannot be null.", errorCode: -1}, null, null);
        }

        //prepare query string for API call;
        var _baseUri = _configuration.BASEURI;
        
        var _queryBuilder = _baseUri + "/sms/history/export";
        
        //Process query parameters
        _queryBuilder = _APIHelper.appendUrlWithQueryParameters(_queryBuilder, {
            "filename": filename
        });

        //validate and preprocess url
        var _queryUrl = _APIHelper.cleanUrl(_queryBuilder);
        
        //prepare headers
        var _headers = {
            "user-agent": "ClickSendSDK"
        };

        //Construct the request
        var _options = {
            queryUrl: _queryUrl,
            method: "GET",
            headers: _headers,
            username: _configuration.username,
            password: _configuration.key
        };
        
        //Build the response processing. 
        function cb (_error, _response, _context) {
            if(_error) {
                callback({errorMessage: _error.message, errorCode: _error.code},null,_context);
            } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                callback(null, _response.body,_context);
            } else if (_response.statusCode == 404) {
                callback(null,null,_context);
                return;
            } else if (_response.statusCode == 400) {
                callback({errorMessage: "BAD_REQUEST", errorCode: 400, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 401) {
                callback({errorMessage: "UNAUTHORIZED", errorCode: 401, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 403) {
                callback({errorMessage: "FORBIDDEN", errorCode: 403, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 405) {
                callback({errorMessage: "METHOD_NOT_FOUND", errorCode: 405, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 429) {
                callback({errorMessage: "TOO_MANY_REQUESTS", errorCode: 429, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 500) {
                callback({errorMessage: "INTERNAL_SERVER_ERROR", errorCode: 500, errorResponse:_response.body}, null, _context);
            } else {
                callback({errorMessage: "HTTP Response Not OK", errorCode: _response.statusCode, errorResponse: _response.body}, null, _context);
            }
        }
        _request(_options, cb);
    },


    /**
     * Add a delivery receipt
     * @param {string} url    Required parameter: Your url
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {string}
     */
    createReceipt: function (url, callback) {

        //validating required parameters
        if (url == null || url == undefined){
            return callback({errorMessage: "The parameter 'url' is a required parameter and cannot be null.", errorCode: -1}, null, null);
        }

        //prepare query string for API call;
        var _baseUri = _configuration.BASEURI;
        
        var _queryBuilder = _baseUri + "/sms/receipts";
        
        //validate and preprocess url
        var _queryUrl = _APIHelper.cleanUrl(_queryBuilder);
        
        //prepare headers
        var _headers = {
            "content-type": "text/plain; charset=utf-8",
            "user-agent": "ClickSendSDK"
        };

        //Construct the request
        var _options = {
            queryUrl: _queryUrl,
            method: "POST",
            headers: _headers,
            body :url,
            username: _configuration.username,
            password: _configuration.key
        };
        
        //Build the response processing. 
        function cb (_error, _response, _context) {
            if(_error) {
                callback({errorMessage: _error.message, errorCode: _error.code},null,_context);
            } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                callback(null, _response.body,_context);
            } else if (_response.statusCode == 404) {
                callback(null,null,_context);
                return;
            } else if (_response.statusCode == 400) {
                callback({errorMessage: "BAD_REQUEST", errorCode: 400, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 401) {
                callback({errorMessage: "UNAUTHORIZED", errorCode: 401, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 403) {
                callback({errorMessage: "FORBIDDEN", errorCode: 403, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 405) {
                callback({errorMessage: "METHOD_NOT_FOUND", errorCode: 405, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 429) {
                callback({errorMessage: "TOO_MANY_REQUESTS", errorCode: 429, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 500) {
                callback({errorMessage: "INTERNAL_SERVER_ERROR", errorCode: 500, errorResponse:_response.body}, null, _context);
            } else {
                callback({errorMessage: "HTTP Response Not OK", errorCode: _response.statusCode, errorResponse: _response.body}, null, _context);
            }
        }
        _request(_options, cb);
    },


    /**
     * Marked delivery receipts as read
     * @param {int|null} dateBefore    Optional parameter: Example: 
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {string}
     */
    markReceiptsAsRead: function (dateBefore, callback) {


        //prepare query string for API call;
        var _baseUri = _configuration.BASEURI;
        
        var _queryBuilder = _baseUri + "/sms/receipts-read";
        
        //Process query parameters
        _queryBuilder = _APIHelper.appendUrlWithQueryParameters(_queryBuilder, {
            "date_before": dateBefore
        });

        //validate and preprocess url
        var _queryUrl = _APIHelper.cleanUrl(_queryBuilder);
        
        //prepare headers
        var _headers = {
            "user-agent": "ClickSendSDK"
        };

        //Construct the request
        var _options = {
            queryUrl: _queryUrl,
            method: "PUT",
            headers: _headers,
            username: _configuration.username,
            password: _configuration.key
        };
        
        //Build the response processing. 
        function cb (_error, _response, _context) {
            if(_error) {
                callback({errorMessage: _error.message, errorCode: _error.code},null,_context);
            } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                callback(null, _response.body,_context);
            } else if (_response.statusCode == 404) {
                callback(null,null,_context);
                return;
            } else if (_response.statusCode == 400) {
                callback({errorMessage: "BAD_REQUEST", errorCode: 400, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 401) {
                callback({errorMessage: "UNAUTHORIZED", errorCode: 401, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 403) {
                callback({errorMessage: "FORBIDDEN", errorCode: 403, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 405) {
                callback({errorMessage: "METHOD_NOT_FOUND", errorCode: 405, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 429) {
                callback({errorMessage: "TOO_MANY_REQUESTS", errorCode: 429, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 500) {
                callback({errorMessage: "INTERNAL_SERVER_ERROR", errorCode: 500, errorResponse:_response.body}, null, _context);
            } else {
                callback({errorMessage: "HTTP Response Not OK", errorCode: _response.statusCode, errorResponse: _response.body}, null, _context);
            }
        }
        _request(_options, cb);
    },


    /**
     * Get all inbound sms
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {string}
     */
    getInboundSms: function (callback) {


        //prepare query string for API call;
        var _baseUri = _configuration.BASEURI;
        
        var _queryBuilder = _baseUri + "/sms/inbound";
        
        //validate and preprocess url
        var _queryUrl = _APIHelper.cleanUrl(_queryBuilder);
        
        //prepare headers
        var _headers = {
            "user-agent": "ClickSendSDK"
        };

        //Construct the request
        var _options = {
            queryUrl: _queryUrl,
            method: "GET",
            headers: _headers,
            username: _configuration.username,
            password: _configuration.key
        };
        
        //Build the response processing. 
        function cb (_error, _response, _context) {
            if(_error) {
                callback({errorMessage: _error.message, errorCode: _error.code},null,_context);
            } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                callback(null, _response.body,_context);
            } else if (_response.statusCode == 404) {
                callback(null,null,_context);
                return;
            } else if (_response.statusCode == 400) {
                callback({errorMessage: "BAD_REQUEST", errorCode: 400, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 401) {
                callback({errorMessage: "UNAUTHORIZED", errorCode: 401, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 403) {
                callback({errorMessage: "FORBIDDEN", errorCode: 403, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 405) {
                callback({errorMessage: "METHOD_NOT_FOUND", errorCode: 405, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 429) {
                callback({errorMessage: "TOO_MANY_REQUESTS", errorCode: 429, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 500) {
                callback({errorMessage: "INTERNAL_SERVER_ERROR", errorCode: 500, errorResponse:_response.body}, null, _context);
            } else {
                callback({errorMessage: "HTTP Response Not OK", errorCode: _response.statusCode, errorResponse: _response.body}, null, _context);
            }
        }
        _request(_options, cb);
    },


    /**
     * Create inbound sms
     * @param {string} url    Required parameter: Your url
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {string}
     */
    createInboundSms: function (url, callback) {

        //validating required parameters
        if (url == null || url == undefined){
            return callback({errorMessage: "The parameter 'url' is a required parameter and cannot be null.", errorCode: -1}, null, null);
        }

        //prepare query string for API call;
        var _baseUri = _configuration.BASEURI;
        
        var _queryBuilder = _baseUri + "/sms/inbound";
        
        //validate and preprocess url
        var _queryUrl = _APIHelper.cleanUrl(_queryBuilder);
        
        //prepare headers
        var _headers = {
            "user-agent": "ClickSendSDK"
        };

        //prepare form data
        var _form = {
            "url": url
        };

        //Remove null values
        _APIHelper.cleanObject(_form);

        //Construct the request
        var _options = {
            queryUrl: _queryUrl,
            method: "POST",
            headers: _headers,
            form : _form,
            username: _configuration.username,
            password: _configuration.key
        };
        
        //Build the response processing. 
        function cb (_error, _response, _context) {
            if(_error) {
                callback({errorMessage: _error.message, errorCode: _error.code},null,_context);
            } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                callback(null, _response.body,_context);
            } else if (_response.statusCode == 404) {
                callback(null,null,_context);
                return;
            } else if (_response.statusCode == 400) {
                callback({errorMessage: "BAD_REQUEST", errorCode: 400, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 401) {
                callback({errorMessage: "UNAUTHORIZED", errorCode: 401, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 403) {
                callback({errorMessage: "FORBIDDEN", errorCode: 403, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 405) {
                callback({errorMessage: "METHOD_NOT_FOUND", errorCode: 405, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 429) {
                callback({errorMessage: "TOO_MANY_REQUESTS", errorCode: 429, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 500) {
                callback({errorMessage: "INTERNAL_SERVER_ERROR", errorCode: 500, errorResponse:_response.body}, null, _context);
            } else {
                callback({errorMessage: "HTTP Response Not OK", errorCode: _response.statusCode, errorResponse: _response.body}, null, _context);
            }
        }
        _request(_options, cb);
    },


    /**
     * Marked all inbound sms as read
     * @param {int} messageId    Required parameter: Example: 
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {string}
     */
    markInboundSmsAsRead: function (messageId, callback) {

        //validating required parameters
        if (messageId == null || messageId == undefined){
            return callback({errorMessage: "The parameter 'messageId' is a required parameter and cannot be null.", errorCode: -1}, null, null);
        }

        //prepare query string for API call;
        var _baseUri = _configuration.BASEURI;
        
        var _queryBuilder = _baseUri + "/sms/inbound-read/";
        
        //validate and preprocess url
        var _queryUrl = _APIHelper.cleanUrl(_queryBuilder);
        
        //prepare headers
        var _headers = {
            "user-agent": "ClickSendSDK"
        };

        //prepare form data
        var _form = {
            "message_id": messageId
        };

        //Remove null values
        _APIHelper.cleanObject(_form);

        //Construct the request
        var _options = {
            queryUrl: _queryUrl,
            method: "PUT",
            headers: _headers,
            form : _form,
            username: _configuration.username,
            password: _configuration.key
        };
        
        //Build the response processing. 
        function cb (_error, _response, _context) {
            if(_error) {
                callback({errorMessage: _error.message, errorCode: _error.code},null,_context);
            } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                callback(null, _response.body,_context);
            } else if (_response.statusCode == 404) {
                callback(null,null,_context);
                return;
            } else if (_response.statusCode == 400) {
                callback({errorMessage: "BAD_REQUEST", errorCode: 400, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 401) {
                callback({errorMessage: "UNAUTHORIZED", errorCode: 401, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 403) {
                callback({errorMessage: "FORBIDDEN", errorCode: 403, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 405) {
                callback({errorMessage: "METHOD_NOT_FOUND", errorCode: 405, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 429) {
                callback({errorMessage: "TOO_MANY_REQUESTS", errorCode: 429, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 500) {
                callback({errorMessage: "INTERNAL_SERVER_ERROR", errorCode: 500, errorResponse:_response.body}, null, _context);
            } else {
                callback({errorMessage: "HTTP Response Not OK", errorCode: _response.statusCode, errorResponse: _response.body}, null, _context);
            }
        }
        _request(_options, cb);
    },


    /**
     * Update scheduled message as cancel
     * @param {string} messageId    Required parameter: Example: 
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {string}
     */
    cancelScheduledSms: function (messageId, callback) {

        //validating required parameters
        if (messageId == null || messageId == undefined){
            return callback({errorMessage: "The parameter 'messageId' is a required parameter and cannot be null.", errorCode: -1}, null, null);
        }

        //prepare query string for API call;
        var _baseUri = _configuration.BASEURI;
        
        var _queryBuilder = _baseUri + "/sms/{message_id}/cancel";
        
        //Process template parameters
        _queryBuilder = _APIHelper.appendUrlWithTemplateParameters(_queryBuilder, {
            "message_id": messageId
        });

        //validate and preprocess url
        var _queryUrl = _APIHelper.cleanUrl(_queryBuilder);
        
        //prepare headers
        var _headers = {
            "user-agent": "ClickSendSDK"
        };

        //Construct the request
        var _options = {
            queryUrl: _queryUrl,
            method: "PUT",
            headers: _headers,
            username: _configuration.username,
            password: _configuration.key
        };
        
        //Build the response processing. 
        function cb (_error, _response, _context) {
            if(_error) {
                callback({errorMessage: _error.message, errorCode: _error.code},null,_context);
            } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                callback(null, _response.body,_context);
            } else if (_response.statusCode == 404) {
                callback(null,null,_context);
                return;
            } else if (_response.statusCode == 400) {
                callback({errorMessage: "BAD_REQUEST", errorCode: 400, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 401) {
                callback({errorMessage: "UNAUTHORIZED", errorCode: 401, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 403) {
                callback({errorMessage: "FORBIDDEN", errorCode: 403, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 405) {
                callback({errorMessage: "METHOD_NOT_FOUND", errorCode: 405, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 429) {
                callback({errorMessage: "TOO_MANY_REQUESTS", errorCode: 429, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 500) {
                callback({errorMessage: "INTERNAL_SERVER_ERROR", errorCode: 500, errorResponse:_response.body}, null, _context);
            } else {
                callback({errorMessage: "HTTP Response Not OK", errorCode: _response.statusCode, errorResponse: _response.body}, null, _context);
            }
        }
        _request(_options, cb);
    },


    /**
     * Update all scheduled message as cancelled
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {string}
     */
    cancelAllScheduledSms: function (callback) {


        //prepare query string for API call;
        var _baseUri = _configuration.BASEURI;
        
        var _queryBuilder = _baseUri + "/sms/cancel-all";
        
        //validate and preprocess url
        var _queryUrl = _APIHelper.cleanUrl(_queryBuilder);
        
        //prepare headers
        var _headers = {
            "user-agent": "ClickSendSDK"
        };

        //Construct the request
        var _options = {
            queryUrl: _queryUrl,
            method: "PUT",
            headers: _headers,
            username: _configuration.username,
            password: _configuration.key
        };
        
        //Build the response processing. 
        function cb (_error, _response, _context) {
            if(_error) {
                callback({errorMessage: _error.message, errorCode: _error.code},null,_context);
            } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                callback(null, _response.body,_context);
            } else if (_response.statusCode == 404) {
                callback(null,null,_context);
                return;
            } else if (_response.statusCode == 400) {
                callback({errorMessage: "BAD_REQUEST", errorCode: 400, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 401) {
                callback({errorMessage: "UNAUTHORIZED", errorCode: 401, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 403) {
                callback({errorMessage: "FORBIDDEN", errorCode: 403, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 405) {
                callback({errorMessage: "METHOD_NOT_FOUND", errorCode: 405, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 429) {
                callback({errorMessage: "TOO_MANY_REQUESTS", errorCode: 429, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 500) {
                callback({errorMessage: "INTERNAL_SERVER_ERROR", errorCode: 500, errorResponse:_response.body}, null, _context);
            } else {
                callback({errorMessage: "HTTP Response Not OK", errorCode: _response.statusCode, errorResponse: _response.body}, null, _context);
            }
        }
        _request(_options, cb);
    },


    /**
     * Create sms template
     * @param {string} templateName    Required parameter: Your template name
     * @param {string} body    Required parameter: Your template body
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {string}
     */
    createSmsTemplate: function (templateName, body, callback) {

        //validating required parameters
        if (templateName == null || templateName == undefined){
            return callback({errorMessage: "The parameter 'templateName' is a required parameter and cannot be null.", errorCode: -1}, null, null);
        } else if (body == null || body == undefined){
            return callback({errorMessage: "The parameter 'body' is a required parameter and cannot be null.", errorCode: -1}, null, null);
        }

        //prepare query string for API call;
        var _baseUri = _configuration.BASEURI;
        
        var _queryBuilder = _baseUri + "/sms/templates";
        
        //Process query parameters
        _queryBuilder = _APIHelper.appendUrlWithQueryParameters(_queryBuilder, {
            "template_name": templateName,
            "body": body
        });

        //validate and preprocess url
        var _queryUrl = _APIHelper.cleanUrl(_queryBuilder);
        
        //prepare headers
        var _headers = {
            "user-agent": "ClickSendSDK"
        };

        //Construct the request
        var _options = {
            queryUrl: _queryUrl,
            method: "POST",
            headers: _headers,
            username: _configuration.username,
            password: _configuration.key
        };
        
        //Build the response processing. 
        function cb (_error, _response, _context) {
            if(_error) {
                callback({errorMessage: _error.message, errorCode: _error.code},null,_context);
            } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                callback(null, _response.body,_context);
            } else if (_response.statusCode == 404) {
                callback(null,null,_context);
                return;
            } else if (_response.statusCode == 400) {
                callback({errorMessage: "BAD_REQUEST", errorCode: 400, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 401) {
                callback({errorMessage: "UNAUTHORIZED", errorCode: 401, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 403) {
                callback({errorMessage: "FORBIDDEN", errorCode: 403, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 405) {
                callback({errorMessage: "METHOD_NOT_FOUND", errorCode: 405, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 429) {
                callback({errorMessage: "TOO_MANY_REQUESTS", errorCode: 429, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 500) {
                callback({errorMessage: "INTERNAL_SERVER_ERROR", errorCode: 500, errorResponse:_response.body}, null, _context);
            } else {
                callback({errorMessage: "HTTP Response Not OK", errorCode: _response.statusCode, errorResponse: _response.body}, null, _context);
            }
        }
        _request(_options, cb);
    },


    /**
     * Delete sms template
     * @param {string} templateId    Required parameter: Example: 
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {string}
     */
    deleteSmsTemplate: function (templateId, callback) {

        //validating required parameters
        if (templateId == null || templateId == undefined){
            return callback({errorMessage: "The parameter 'templateId' is a required parameter and cannot be null.", errorCode: -1}, null, null);
        }

        //prepare query string for API call;
        var _baseUri = _configuration.BASEURI;
        
        var _queryBuilder = _baseUri + "/sms/templates/{template_id}";
        
        //Process template parameters
        _queryBuilder = _APIHelper.appendUrlWithTemplateParameters(_queryBuilder, {
            "template_id": templateId
        });

        //validate and preprocess url
        var _queryUrl = _APIHelper.cleanUrl(_queryBuilder);
        
        //prepare headers
        var _headers = {
            "user-agent": "ClickSendSDK"
        };

        //Construct the request
        var _options = {
            queryUrl: _queryUrl,
            method: "DELETE",
            headers: _headers,
            username: _configuration.username,
            password: _configuration.key
        };
        
        //Build the response processing. 
        function cb (_error, _response, _context) {
            if(_error) {
                callback({errorMessage: _error.message, errorCode: _error.code},null,_context);
            } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                callback(null, _response.body,_context);
            } else if (_response.statusCode == 404) {
                callback(null,null,_context);
                return;
            } else if (_response.statusCode == 400) {
                callback({errorMessage: "BAD_REQUEST", errorCode: 400, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 401) {
                callback({errorMessage: "UNAUTHORIZED", errorCode: 401, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 403) {
                callback({errorMessage: "FORBIDDEN", errorCode: 403, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 405) {
                callback({errorMessage: "METHOD_NOT_FOUND", errorCode: 405, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 429) {
                callback({errorMessage: "TOO_MANY_REQUESTS", errorCode: 429, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 500) {
                callback({errorMessage: "INTERNAL_SERVER_ERROR", errorCode: 500, errorResponse:_response.body}, null, _context);
            } else {
                callback({errorMessage: "HTTP Response Not OK", errorCode: _response.statusCode, errorResponse: _response.body}, null, _context);
            }
        }
        _request(_options, cb);
    },


    /**
     * Update sms template
     * @param {int} templateId    Required parameter: Example: 
     * @param {string} templateName    Required parameter: Example: 
     * @param {string} body    Required parameter: Example: 
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {string}
     */
    updateSmsTemplate: function (templateId, templateName, body, callback) {

        //validating required parameters
        if (templateId == null || templateId == undefined){
            return callback({errorMessage: "The parameter 'templateId' is a required parameter and cannot be null.", errorCode: -1}, null, null);
        } else if (templateName == null || templateName == undefined){
            return callback({errorMessage: "The parameter 'templateName' is a required parameter and cannot be null.", errorCode: -1}, null, null);
        } else if (body == null || body == undefined){
            return callback({errorMessage: "The parameter 'body' is a required parameter and cannot be null.", errorCode: -1}, null, null);
        }

        //prepare query string for API call;
        var _baseUri = _configuration.BASEURI;
        
        var _queryBuilder = _baseUri + "/sms/templates/{template_id}";
        
        //Process template parameters
        _queryBuilder = _APIHelper.appendUrlWithTemplateParameters(_queryBuilder, {
            "template_id": templateId
        });

        //Process query parameters
        _queryBuilder = _APIHelper.appendUrlWithQueryParameters(_queryBuilder, {
            "template_name": templateName,
            "body": body
        });

        //validate and preprocess url
        var _queryUrl = _APIHelper.cleanUrl(_queryBuilder);
        
        //prepare headers
        var _headers = {
            "user-agent": "ClickSendSDK"
        };

        //Construct the request
        var _options = {
            queryUrl: _queryUrl,
            method: "PUT",
            headers: _headers,
            username: _configuration.username,
            password: _configuration.key
        };
        
        //Build the response processing. 
        function cb (_error, _response, _context) {
            if(_error) {
                callback({errorMessage: _error.message, errorCode: _error.code},null,_context);
            } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                callback(null, _response.body,_context);
            } else if (_response.statusCode == 404) {
                callback(null,null,_context);
                return;
            } else if (_response.statusCode == 400) {
                callback({errorMessage: "BAD_REQUEST", errorCode: 400, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 401) {
                callback({errorMessage: "UNAUTHORIZED", errorCode: 401, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 403) {
                callback({errorMessage: "FORBIDDEN", errorCode: 403, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 405) {
                callback({errorMessage: "METHOD_NOT_FOUND", errorCode: 405, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 429) {
                callback({errorMessage: "TOO_MANY_REQUESTS", errorCode: 429, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 500) {
                callback({errorMessage: "INTERNAL_SERVER_ERROR", errorCode: 500, errorResponse:_response.body}, null, _context);
            } else {
                callback({errorMessage: "HTTP Response Not OK", errorCode: _response.statusCode, errorResponse: _response.body}, null, _context);
            }
        }
        _request(_options, cb);
    },


    /**
     * Get all delivery receipts
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {string}
     */
    getDeliveryReceipts: function (callback) {


        //prepare query string for API call;
        var _baseUri = _configuration.BASEURI;
        
        var _queryBuilder = _baseUri + "/sms/receipts";
        
        //validate and preprocess url
        var _queryUrl = _APIHelper.cleanUrl(_queryBuilder);
        
        //prepare headers
        var _headers = {
            "user-agent": "ClickSendSDK"
        };

        //Construct the request
        var _options = {
            queryUrl: _queryUrl,
            method: "GET",
            headers: _headers,
            username: _configuration.username,
            password: _configuration.key
        };
        
        //Build the response processing. 
        function cb (_error, _response, _context) {
            if(_error) {
                callback({errorMessage: _error.message, errorCode: _error.code},null,_context);
            } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                callback(null, _response.body,_context);
            } else if (_response.statusCode == 404) {
                callback(null,null,_context);
                return;
            } else if (_response.statusCode == 400) {
                callback({errorMessage: "BAD_REQUEST", errorCode: 400, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 401) {
                callback({errorMessage: "UNAUTHORIZED", errorCode: 401, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 403) {
                callback({errorMessage: "FORBIDDEN", errorCode: 403, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 405) {
                callback({errorMessage: "METHOD_NOT_FOUND", errorCode: 405, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 429) {
                callback({errorMessage: "TOO_MANY_REQUESTS", errorCode: 429, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 500) {
                callback({errorMessage: "INTERNAL_SERVER_ERROR", errorCode: 500, errorResponse:_response.body}, null, _context);
            } else {
                callback({errorMessage: "HTTP Response Not OK", errorCode: _response.statusCode, errorResponse: _response.body}, null, _context);
            }
        }
        _request(_options, cb);
    },


    /**
     * Get lists of all sms templates
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {string}
     */
    getSmsTemplates: function (callback) {


        //prepare query string for API call;
        var _baseUri = _configuration.BASEURI;
        
        var _queryBuilder = _baseUri + "/sms/templates";
        
        //validate and preprocess url
        var _queryUrl = _APIHelper.cleanUrl(_queryBuilder);
        
        //prepare headers
        var _headers = {
            "user-agent": "ClickSendSDK"
        };

        //Construct the request
        var _options = {
            queryUrl: _queryUrl,
            method: "GET",
            headers: _headers,
            username: _configuration.username,
            password: _configuration.key
        };
        
        //Build the response processing. 
        function cb (_error, _response, _context) {
            if(_error) {
                callback({errorMessage: _error.message, errorCode: _error.code},null,_context);
            } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                callback(null, _response.body,_context);
            } else if (_response.statusCode == 404) {
                callback(null,null,_context);
                return;
            } else if (_response.statusCode == 400) {
                callback({errorMessage: "BAD_REQUEST", errorCode: 400, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 401) {
                callback({errorMessage: "UNAUTHORIZED", errorCode: 401, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 403) {
                callback({errorMessage: "FORBIDDEN", errorCode: 403, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 405) {
                callback({errorMessage: "METHOD_NOT_FOUND", errorCode: 405, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 429) {
                callback({errorMessage: "TOO_MANY_REQUESTS", errorCode: 429, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 500) {
                callback({errorMessage: "INTERNAL_SERVER_ERROR", errorCode: 500, errorResponse:_response.body}, null, _context);
            } else {
                callback({errorMessage: "HTTP Response Not OK", errorCode: _response.statusCode, errorResponse: _response.body}, null, _context);
            }
        }
        _request(_options, cb);
    },


    /**
     * TODO: type endpoint description here
     * @param {int|null} dateBefore    Optional parameter: An optional timestamp - mark all as read before this timestamp. If not given, all messages will be marked as read.
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {string}
     */
    markAllInboundSMSAsRead: function (dateBefore, callback) {


        //prepare query string for API call;
        var _baseUri = _configuration.BASEURI;
        
        var _queryBuilder = _baseUri + "/sms/inbound-read";
        
        //Process query parameters
        _queryBuilder = _APIHelper.appendUrlWithQueryParameters(_queryBuilder, {
            "date_before": dateBefore
        });

        //validate and preprocess url
        var _queryUrl = _APIHelper.cleanUrl(_queryBuilder);
        
        //prepare headers
        var _headers = {
            "user-agent": "ClickSendSDK"
        };

        //Construct the request
        var _options = {
            queryUrl: _queryUrl,
            method: "PUT",
            headers: _headers,
            username: _configuration.username,
            password: _configuration.key
        };
        
        //Build the response processing. 
        function cb (_error, _response, _context) {
            if(_error) {
                callback({errorMessage: _error.message, errorCode: _error.code},null,_context);
            } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                callback(null, _response.body,_context);
            } else if (_response.statusCode == 404) {
                callback(null,null,_context);
                return;
            } else if (_response.statusCode == 400) {
                callback({errorMessage: "BAD_REQUEST", errorCode: 400, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 401) {
                callback({errorMessage: "UNAUTHORIZED", errorCode: 401, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 403) {
                callback({errorMessage: "FORBIDDEN", errorCode: 403, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 405) {
                callback({errorMessage: "METHOD_NOT_FOUND", errorCode: 405, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 429) {
                callback({errorMessage: "TOO_MANY_REQUESTS", errorCode: 429, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 500) {
                callback({errorMessage: "INTERNAL_SERVER_ERROR", errorCode: 500, errorResponse:_response.body}, null, _context);
            } else {
                callback({errorMessage: "HTTP Response Not OK", errorCode: _response.statusCode, errorResponse: _response.body}, null, _context);
            }
        }
        _request(_options, cb);
    },


    /**
     * Get a Specific Delivery Receipt
     * @param {string} messageId    Required parameter: Example: 
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {string}
     */
    getSpecificDeliveryReceipt: function (messageId, callback) {

        //validating required parameters
        if (messageId == null || messageId == undefined){
            return callback({errorMessage: "The parameter 'messageId' is a required parameter and cannot be null.", errorCode: -1}, null, null);
        }

        //prepare query string for API call;
        var _baseUri = _configuration.BASEURI;
        
        var _queryBuilder = _baseUri + "/sms/receipts/{message_id}";
        
        //Process template parameters
        _queryBuilder = _APIHelper.appendUrlWithTemplateParameters(_queryBuilder, {
            "message_id": messageId
        });

        //validate and preprocess url
        var _queryUrl = _APIHelper.cleanUrl(_queryBuilder);
        
        //prepare headers
        var _headers = {
            "user-agent": "ClickSendSDK"
        };

        //Construct the request
        var _options = {
            queryUrl: _queryUrl,
            method: "GET",
            headers: _headers,
            username: _configuration.username,
            password: _configuration.key
        };
        
        //Build the response processing. 
        function cb (_error, _response, _context) {
            if(_error) {
                callback({errorMessage: _error.message, errorCode: _error.code},null,_context);
            } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                callback(null, _response.body,_context);
            } else if (_response.statusCode == 404) {
                callback(null,null,_context);
                return;
            } else if (_response.statusCode == 400) {
                callback({errorMessage: "BAD_REQUEST", errorCode: 400, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 401) {
                callback({errorMessage: "UNAUTHORIZED", errorCode: 401, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 403) {
                callback({errorMessage: "FORBIDDEN", errorCode: 403, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 405) {
                callback({errorMessage: "METHOD_NOT_FOUND", errorCode: 405, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 429) {
                callback({errorMessage: "TOO_MANY_REQUESTS", errorCode: 429, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 500) {
                callback({errorMessage: "INTERNAL_SERVER_ERROR", errorCode: 500, errorResponse:_response.body}, null, _context);
            } else {
                callback({errorMessage: "HTTP Response Not OK", errorCode: _response.statusCode, errorResponse: _response.body}, null, _context);
            }
        }
        _request(_options, cb);
    }

};

module.exports = SMSController;