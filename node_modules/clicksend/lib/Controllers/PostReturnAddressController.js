/**
 * clicksend
 *
 * This file was automatically generated for ClickSend by APIMATIC v2.0 ( https://apimatic.io ) on 12/20/2016
 */

var _request = require('../Http/Client/RequestClient'),
    _configuration = require('../configuration'),
    _APIHelper = require('../APIHelper');

var PostReturnAddressController = {

    /**
     * Update post return address
     * @param {int} returnAddressId    Required parameter: Example: 
     * @param {string} addressName    Required parameter: Example: 
     * @param {string} addressLine1    Required parameter: Example: 
     * @param {string} addressLine2    Required parameter: Example: 
     * @param {string} addressCity    Required parameter: Example: 
     * @param {string} addressState    Required parameter: Example: 
     * @param {string} addressPostalCode    Required parameter: Example: 
     * @param {string} addressCountry    Required parameter: Example: 
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {string}
     */
    updatePostReturnAddress: function (returnAddressId, addressName, addressLine1, addressLine2, addressCity, addressState, addressPostalCode, addressCountry, callback) {

        //validating required parameters
        if (returnAddressId == null || returnAddressId == undefined){
            return callback({errorMessage: "The parameter 'returnAddressId' is a required parameter and cannot be null.", errorCode: -1}, null, null);
        } else if (addressName == null || addressName == undefined){
            return callback({errorMessage: "The parameter 'addressName' is a required parameter and cannot be null.", errorCode: -1}, null, null);
        } else if (addressLine1 == null || addressLine1 == undefined){
            return callback({errorMessage: "The parameter 'addressLine1' is a required parameter and cannot be null.", errorCode: -1}, null, null);
        } else if (addressLine2 == null || addressLine2 == undefined){
            return callback({errorMessage: "The parameter 'addressLine2' is a required parameter and cannot be null.", errorCode: -1}, null, null);
        } else if (addressCity == null || addressCity == undefined){
            return callback({errorMessage: "The parameter 'addressCity' is a required parameter and cannot be null.", errorCode: -1}, null, null);
        } else if (addressState == null || addressState == undefined){
            return callback({errorMessage: "The parameter 'addressState' is a required parameter and cannot be null.", errorCode: -1}, null, null);
        } else if (addressPostalCode == null || addressPostalCode == undefined){
            return callback({errorMessage: "The parameter 'addressPostalCode' is a required parameter and cannot be null.", errorCode: -1}, null, null);
        } else if (addressCountry == null || addressCountry == undefined){
            return callback({errorMessage: "The parameter 'addressCountry' is a required parameter and cannot be null.", errorCode: -1}, null, null);
        }

        //prepare query string for API call;
        var _baseUri = _configuration.BASEURI;
        
        var _queryBuilder = _baseUri + "/post/return-addresses/{return_address_id}";
        
        //Process template parameters
        _queryBuilder = _APIHelper.appendUrlWithTemplateParameters(_queryBuilder, {
            "return_address_id": returnAddressId
        });

        //Process query parameters
        _queryBuilder = _APIHelper.appendUrlWithQueryParameters(_queryBuilder, {
            "address_name": addressName,
            "address_line_1": addressLine1,
            "address_line_2": addressLine2,
            "address_city": addressCity,
            "address_state": addressState,
            "address_postal_code": addressPostalCode,
            "address_country": addressCountry
        });

        //validate and preprocess url
        var _queryUrl = _APIHelper.cleanUrl(_queryBuilder);
        
        //prepare headers
        var _headers = {
            "user-agent": "ClickSendSDK"
        };

        //Construct the request
        var _options = {
            queryUrl: _queryUrl,
            method: "PUT",
            headers: _headers,
            username: _configuration.username,
            password: _configuration.key
        };
        
        //Build the response processing. 
        function cb (_error, _response, _context) {
            if(_error) {
                callback({errorMessage: _error.message, errorCode: _error.code},null,_context);
            } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                callback(null, _response.body,_context);
            } else if (_response.statusCode == 404) {
                callback(null,null,_context);
                return;
            } else if (_response.statusCode == 400) {
                callback({errorMessage: "BAD_REQUEST", errorCode: 400, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 401) {
                callback({errorMessage: "UNAUTHORIZED", errorCode: 401, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 403) {
                callback({errorMessage: "FORBIDDEN", errorCode: 403, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 405) {
                callback({errorMessage: "METHOD_NOT_FOUND", errorCode: 405, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 429) {
                callback({errorMessage: "TOO_MANY_REQUESTS", errorCode: 429, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 500) {
                callback({errorMessage: "INTERNAL_SERVER_ERROR", errorCode: 500, errorResponse:_response.body}, null, _context);
            } else {
                callback({errorMessage: "HTTP Response Not OK", errorCode: _response.statusCode, errorResponse: _response.body}, null, _context);
            }
        }
        _request(_options, cb);
    },


    /**
     * Create post return address
     * @param {PostReturnAddress} address    Required parameter: Example: 
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {string}
     */
    createPostReturnAddress: function (address, callback) {

        //validating required parameters
        if (address == null || address == undefined){
            return callback({errorMessage: "The parameter 'address' is a required parameter and cannot be null.", errorCode: -1}, null, null);
        }

        //prepare query string for API call;
        var _baseUri = _configuration.BASEURI;
        
        var _queryBuilder = _baseUri + "/post/return-addresses";
        
        //validate and preprocess url
        var _queryUrl = _APIHelper.cleanUrl(_queryBuilder);
        
        //prepare headers
        var _headers = {
            "content-type": "application/json; charset=utf-8",
            "user-agent": "ClickSendSDK"
        };

        //Remove null values
        _APIHelper.cleanObject(address);

        //Construct the request
        var _options = {
            queryUrl: _queryUrl,
            method: "POST",
            headers: _headers,
            body : _APIHelper.jsonSerialize(address),
            username: _configuration.username,
            password: _configuration.key
        };
        
        //Build the response processing. 
        function cb (_error, _response, _context) {
            if(_error) {
                callback({errorMessage: _error.message, errorCode: _error.code},null,_context);
            } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                callback(null, _response.body,_context);
            } else if (_response.statusCode == 404) {
                callback(null,null,_context);
                return;
            } else if (_response.statusCode == 400) {
                callback({errorMessage: "BAD_REQUEST", errorCode: 400, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 401) {
                callback({errorMessage: "UNAUTHORIZED", errorCode: 401, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 403) {
                callback({errorMessage: "FORBIDDEN", errorCode: 403, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 405) {
                callback({errorMessage: "METHOD_NOT_FOUND", errorCode: 405, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 429) {
                callback({errorMessage: "TOO_MANY_REQUESTS", errorCode: 429, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 500) {
                callback({errorMessage: "INTERNAL_SERVER_ERROR", errorCode: 500, errorResponse:_response.body}, null, _context);
            } else {
                callback({errorMessage: "HTTP Response Not OK", errorCode: _response.statusCode, errorResponse: _response.body}, null, _context);
            }
        }
        _request(_options, cb);
    },


    /**
     * Get list of post return addresses
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {string}
     */
    getPostReturnAddresses: function (callback) {


        //prepare query string for API call;
        var _baseUri = _configuration.BASEURI;
        
        var _queryBuilder = _baseUri + "/post/return-addresses";
        
        //validate and preprocess url
        var _queryUrl = _APIHelper.cleanUrl(_queryBuilder);
        
        //prepare headers
        var _headers = {
            "user-agent": "ClickSendSDK"
        };

        //Construct the request
        var _options = {
            queryUrl: _queryUrl,
            method: "GET",
            headers: _headers,
            username: _configuration.username,
            password: _configuration.key
        };
        
        //Build the response processing. 
        function cb (_error, _response, _context) {
            if(_error) {
                callback({errorMessage: _error.message, errorCode: _error.code},null,_context);
            } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                callback(null, _response.body,_context);
            } else if (_response.statusCode == 404) {
                callback(null,null,_context);
                return;
            } else if (_response.statusCode == 400) {
                callback({errorMessage: "BAD_REQUEST", errorCode: 400, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 401) {
                callback({errorMessage: "UNAUTHORIZED", errorCode: 401, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 403) {
                callback({errorMessage: "FORBIDDEN", errorCode: 403, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 405) {
                callback({errorMessage: "METHOD_NOT_FOUND", errorCode: 405, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 429) {
                callback({errorMessage: "TOO_MANY_REQUESTS", errorCode: 429, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 500) {
                callback({errorMessage: "INTERNAL_SERVER_ERROR", errorCode: 500, errorResponse:_response.body}, null, _context);
            } else {
                callback({errorMessage: "HTTP Response Not OK", errorCode: _response.statusCode, errorResponse: _response.body}, null, _context);
            }
        }
        _request(_options, cb);
    },


    /**
     * Get specific post return address
     * @param {int} returnAddressId    Required parameter: Example: 
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {string}
     */
    getPostReturnAddress: function (returnAddressId, callback) {

        //validating required parameters
        if (returnAddressId == null || returnAddressId == undefined){
            return callback({errorMessage: "The parameter 'returnAddressId' is a required parameter and cannot be null.", errorCode: -1}, null, null);
        }

        //prepare query string for API call;
        var _baseUri = _configuration.BASEURI;
        
        var _queryBuilder = _baseUri + "/post/return-addresses/{return_address_id}";
        
        //Process template parameters
        _queryBuilder = _APIHelper.appendUrlWithTemplateParameters(_queryBuilder, {
            "return_address_id": returnAddressId
        });

        //validate and preprocess url
        var _queryUrl = _APIHelper.cleanUrl(_queryBuilder);
        
        //prepare headers
        var _headers = {
            "user-agent": "ClickSendSDK"
        };

        //Construct the request
        var _options = {
            queryUrl: _queryUrl,
            method: "GET",
            headers: _headers,
            username: _configuration.username,
            password: _configuration.key
        };
        
        //Build the response processing. 
        function cb (_error, _response, _context) {
            if(_error) {
                callback({errorMessage: _error.message, errorCode: _error.code},null,_context);
            } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                callback(null, _response.body,_context);
            } else if (_response.statusCode == 404) {
                callback(null,null,_context);
                return;
            } else if (_response.statusCode == 400) {
                callback({errorMessage: "BAD_REQUEST", errorCode: 400, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 401) {
                callback({errorMessage: "UNAUTHORIZED", errorCode: 401, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 403) {
                callback({errorMessage: "FORBIDDEN", errorCode: 403, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 405) {
                callback({errorMessage: "METHOD_NOT_FOUND", errorCode: 405, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 429) {
                callback({errorMessage: "TOO_MANY_REQUESTS", errorCode: 429, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 500) {
                callback({errorMessage: "INTERNAL_SERVER_ERROR", errorCode: 500, errorResponse:_response.body}, null, _context);
            } else {
                callback({errorMessage: "HTTP Response Not OK", errorCode: _response.statusCode, errorResponse: _response.body}, null, _context);
            }
        }
        _request(_options, cb);
    },


    /**
     * Delete specific post return address
     * @param {int} returnAddressId    Required parameter: Example: 
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {string}
     */
    deletePostReturnAddress: function (returnAddressId, callback) {

        //validating required parameters
        if (returnAddressId == null || returnAddressId == undefined){
            return callback({errorMessage: "The parameter 'returnAddressId' is a required parameter and cannot be null.", errorCode: -1}, null, null);
        }

        //prepare query string for API call;
        var _baseUri = _configuration.BASEURI;
        
        var _queryBuilder = _baseUri + "/post/return-addresses/{return_address_id}";
        
        //Process template parameters
        _queryBuilder = _APIHelper.appendUrlWithTemplateParameters(_queryBuilder, {
            "return_address_id": returnAddressId
        });

        //validate and preprocess url
        var _queryUrl = _APIHelper.cleanUrl(_queryBuilder);
        
        //prepare headers
        var _headers = {
            "user-agent": "ClickSendSDK"
        };

        //Construct the request
        var _options = {
            queryUrl: _queryUrl,
            method: "DELETE",
            headers: _headers,
            username: _configuration.username,
            password: _configuration.key
        };
        
        //Build the response processing. 
        function cb (_error, _response, _context) {
            if(_error) {
                callback({errorMessage: _error.message, errorCode: _error.code},null,_context);
            } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                callback(null, _response.body,_context);
            } else if (_response.statusCode == 404) {
                callback(null,null,_context);
                return;
            } else if (_response.statusCode == 400) {
                callback({errorMessage: "BAD_REQUEST", errorCode: 400, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 401) {
                callback({errorMessage: "UNAUTHORIZED", errorCode: 401, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 403) {
                callback({errorMessage: "FORBIDDEN", errorCode: 403, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 405) {
                callback({errorMessage: "METHOD_NOT_FOUND", errorCode: 405, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 429) {
                callback({errorMessage: "TOO_MANY_REQUESTS", errorCode: 429, errorResponse:_response.body}, null, _context);
            } else if (_response.statusCode == 500) {
                callback({errorMessage: "INTERNAL_SERVER_ERROR", errorCode: 500, errorResponse:_response.body}, null, _context);
            } else {
                callback({errorMessage: "HTTP Response Not OK", errorCode: _response.statusCode, errorResponse: _response.body}, null, _context);
            }
        }
        _request(_options, cb);
    }

};

module.exports = PostReturnAddressController;